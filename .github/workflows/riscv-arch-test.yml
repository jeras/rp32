# This is a basic workflow to help you get started with Actions

name: riscv-arch-test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        xlen:
        - 32
        - 64
        device:
        - I
        - C
        - M
        - privilege
        - Zifencei
    name: "RISC-V Compatibility Check"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: "repository checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: "Setup RISC-V GCC"
        run: |
          mkdir riscv
          wget https://github.com/riscv-collab/riscv-gnu-toolchain/releases/download/2021.09.16/riscv64-elf-ubuntu-20.04-nightly-2021.09.16-nightly.tar.gz
          tar -xzf riscv64-elf-ubuntu-20.04-nightly-2021.09.16-nightly.tar.gz
          ls -al riscv

      - name: "Setup Verilator"
        run: |
          sudo apt install libsystemc
          wget https://github.com/sifive/verilator/releases/download/4.204-0sifive3/verilator_4.204-0sifive3_amd64.deb
          sudo dpkg -i verilator_4.204-0sifive3_amd64.deb

      - name: 'Run RISC-V Architecture Tests'
        run: |
          export PATH=`pwd`/riscv/bin/:$PATH
          cd test
          TARGETDIR=`pwd` WORK=`pwd`/work RISCV_TARGET=r5p XLEN=64 RISCV_DEVICE=I make -C ../submodules/riscv-arch-test verify
          #${{ matrix.suite }}